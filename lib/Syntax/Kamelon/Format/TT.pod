=head1 NAME

Syntax::Kamelon::Format::TT 

=head1 SYNOPSIS

 my $template = 't/Samples/template.tpl';
 
 my $kam = Syntax::Kamelon->new(
    syntax => 'Perl',
    formatter => ['TT',
       folding => 2,
       template => $template,
    ],
 );
 
 while (my $in = <IFILE>) {
    $kam->Parse($in);
 }
 
 print $kam->Format;

=head1 DESCRIPTION

B<Syntax::Kamelon::Format::TT> provides is formatting interface to B<Syntax::Kamelon> that provides support for the Template Toolkit. 
You do not have to create an instance of B<TT> yourself. B<Kamelon> will do that for you. It inherits B<Syntax::Kamelon::Format::Base>.
It is flexible in its use. You have the option of letting it take care of all Template Toolkit operations. Or you can just collect the
formatting information after the parsing process and feed this information to your own instance of Template Toolkit.

=head1 OPTIONS

The constructor is called with a paired list of options as parameters. You can use
the following options.

=item B<notoolkit> boolean

If you specify this option B<TT> will not create a Template Toolkit instance. You can pull the formatting data through the B<GetData> method. 
The default setting is 0. If you set this option, all other options become meaningless.

=item B<outmethod> various

This option is passed on to the B<process> method of the Template Toolkit. It can be a reference to a scalar,
a reference to a output file handle, or a filename. You can also set it to 'returnscalar', which is also the default value.
If this case the B<Format> method returns the formatted document in a scalar variable.

=item B<template> various

This option is passed on to the B<process> method of the Template Toolkit. It can be a reference to a scalar,
a reference to a input file handle, or a file name.

=item B<toolkit> ref to template toolkit instance

Use this option if you want to use your own instance of Template Toolkit for formatting. If you set this option, 
the B<ttconfig> option is not used.

=item B<ttconfig> ref to hash

This is the config hash that is used in Template Tookits constructor. By default it is set to {}.

=back

=head1 USER METHODS

=item B<Format>

Overwritten method. Usually called through B<Kamelon>. Formats the data collected by B<Parse> by using Template Toolkit.

=item B<GetData>

Use this method if you want to use your own instance of Template Tooolkit instead of B<TT>'s internal one. It returns
a data structure that looks like this:

 my $data = {
    folds => { #the keys of this hash are line numbers
	    4 => {
          end => $endline,
		    depth => $folddepth,
		    line => $text,
		    region => $regionname,
	    },
	    ...
    },
    content => [
       [{ text => $snippet, tag => $tagname}, ...], #this is one line
       ...
    ],
 }

=item B<OutMethod>(I<$various>)

Corresponds with the B<outmethod> option. Sets and returns the output method.

=item B<Template>(I<$various>)

Corresponds with the B<template> option. Sets and returns the template that will
be processed by B<Format>.

=item B<Toolkit> ref to Template Toolkit instance

Corresponds with the B<toolkit> option. Sets and returns the Template Toolkit
instance that is used for formatting.

=over 4

=back

=head1 SYSTEM METHODS

=over 4

=item B<Parse>(I<@out>);

Overwritten method. receives a paired list of tags and textfragments and converts eacht pair to a hash that looks like:

 {
    text => $text,
    tage => $tagname
 }

=back

=head1 AUTHOR AND COPYRIGHT

This module is written and maintained by:

Hans Jeuken < hansjeuken at xs4all dot nl>

Copyright (c) 2017 by Hans Jeuken, all rights reserved.

Published under the GPLV3 license

=head1 SEE ALSO

B<Syntax::Kamelon>, B<Syntax::Kamelon::Builder>, B<Syntax::Kamelon::Debugger>, B<Syntax::Kamelon::Diagnostics>, B<Syntax::Kamelon::Indexer>, 
B<Syntax::Kamelon::XMLData>, B<Syntax::Kamelon::Format::Base>.

=cut

